#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.09
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1025781660',
        'name' => 'global/header.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "<!-- 1.0\@bugzilla.org -->\n";
    $output .=  "\n\n";
    $output .=  "\n";
    $stash->set('h1', $stash->get('title'), 1);
    $stash->set('h2', '', 1);
    $stash->set('bgcolor', '#FFFFFF', 1);
    $stash->set('onload', '', 1);
    $output .=  "\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n  <head>\n    <title>";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('title');
        
        &$filter($output);
    };
    
    $output .=  "</title>\n    \n";
    $output .=  "\n";
    $output .=  $stash->get('header_html');
    $output .=  "\n    ";
    if ($stash->get('javascript')) {
    $output .=  "\n      <script type=\"text/javascript\" language=\"JavaScript\">";
    $output .=  $stash->get('javascript');
    $output .=  "\n      </script>";
    }
    
    $output .=  "\n    ";
    if ($stash->get('style')) {
    $output .=  "\n      <style type=\"text/css\">";
    $output .=  $stash->get('style');
    $output .=  "\n      </style>";
    }
    
    $output .=  "\n    ";
    if ($stash->get('style_urls')) {
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('style_urls');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'style_url'} = $value;
    $output .=  "\n        <link href=\"";
    $output .=  $stash->get('style_url');
    $output .=  "\" rel=\"stylesheet\" type=\"text/css\">";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    }
    
    $output .=  "\n  \n  </head>\n  \n";
    $output .=  "\n\n  <body bgcolor=\"";
    $output .=  $stash->get('bgcolor');
    $output .=  "\" onload=\"";
    $output .=  $stash->get('onload');
    $output .=  "\">\n\n";
    $output .=  "\n";
    $output .=  $context->include('global/banner.html.tmpl');
    $output .=  "\n";
    if ($stash->get('h1') || $stash->get('h2')) {
    $output .=  "\n    <table border=\"0\" cellspacing=\"0\">\n      <tr>\n        <td valign=\"top\" align=\"left\">\n          <table border=\"0\" cellpadding=\"0\" cellspacing=\"2\">\n            <tr>\n              <td valign=\"top\" align=\"left\" nowrap=\"nowrap\">\n                <font size=\"+1\"><b>";
    $output .=  $stash->get('h1');
    $output .=  "</b></font>\n              </td>\n            </tr>\n          </table>\n        </td>\n        <td valign=\"middle\">&nbsp;</td>\n        <td valign=\"middle\" align=\"left\">";
    $output .=  $stash->get('h2');
    $output .=  "</td>\n      </tr>\n    </table>";
    }
    
    $output .=  "\n";
    if ($stash->get('message')) {
    $output .=  "\n  <table width=\"100%\" cellspacing=\"0\" cellpadding=\"5\" border=\"1\"><tr><td>\n    <font color=\"green\">";
    $output .=  $stash->get('message');
    $output .=  "</font>\n  </td></tr></table>";
    }
    
    $output .=  "\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
