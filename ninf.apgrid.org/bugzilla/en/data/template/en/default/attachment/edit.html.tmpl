#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.09
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1051217118',
        'name' => 'attachment/edit.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "<!-- 1.0\@bugzilla.org -->\n";
    $output .=  "\n\n";
    
    # CAPTURE
    $stash->set('title', do {
        my $output = '';
    $output .=  "Edit Attachment #";
    $output .=  $stash->get('attachid');
    $output .=  " for Bug #";
    $output .=  $stash->get('bugid');
        $output;
    });
    
    
    # CAPTURE
    $stash->set('h1', do {
        my $output = '';
    $output .=  "Edit Attachment #";
    $output .=  $stash->get('attachid');
    $output .=  " for <a href=\"show_bug.cgi?id=";
    $output .=  $stash->get('bugid');
    $output .=  "\">Bug #";
    $output .=  $stash->get('bugid');
    $output .=  "</a>";
        $output;
    });
    
    
    # CAPTURE
    $stash->set('h2', do {
        my $output = '';
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('bugsummary');
        
        &$filter($output);
    };
    
        $output;
    });
    
    $output .=  "\n";
    $output .=  $context->process('global/header.html.tmpl', { 'title' => $stash->get('title'), 'h1' => $stash->get('h1'), 'h2' => $stash->get('h2'), 'style' => '
        th { text-align: right; vertical-align: top; }
        td { text-align: left; vertical-align: top; }
        td#info { text-align: right; vertical-align: top; }
        td#actions { text-align: right; vertical-align: bottom; }
        td#noview { text-align: left; vertical-align: center; }
      ' });
    $output .=  "\n\n<script type=\"application/x-javascript\" language=\"JavaScript\">\n  <!--\n  function editAsComment()\n    {\n      // Get the content of the document as a string.\n      var viewFrame = document.getElementById('viewFrame');\n      var aSerializer = new XMLSerializer();\n      var contentDocument = viewFrame.contentDocument;\n      var theContent = aSerializer.serializeToString(contentDocument);\n\n      // If this is a plaintext document, remove cruft that Mozilla adds\n      // because it treats it as an HTML document with a big PRE section.\n      // http://bugzilla.mozilla.org/show_bug.cgi?id=86012\n      var contentType = '";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('contenttype');
        
        &$filter($output);
    };
    
    $output .=  "';\n      if ( contentType == 'text/plain' )\n        {\n          theContent = theContent.replace( /^<html><head\\/><body><pre>/i , \"\" );\n          theContent = theContent.replace( /<\\/pre><\\/body><\\/html>\$/i , \"\" );\n          theContent = theContent.replace( /&lt;/gi , \"<\" );\n          theContent = theContent.replace( /&gt;/gi , \">\" );\n          theContent = theContent.replace( /&amp;/gi , \"&\" );\n        }\n\n      // Add mail-style quote indicators (>) to the beginning of each line.\n      // \".*\\n\" matches lines that end with a newline, while \".+\" matches\n      // the rare situation in which the last line of a file does not end\n      // with a newline.\n      theContent = theContent.replace( /(.*\\n|.+)/g , \">\$1\" );\n\n      hideElementById('viewFrame');\n      hideElementById('editButton');\n      hideElementById('smallCommentFrame');\n\n      showElementById('undoEditButton');\n\n      // Show the TEXTAREA that will contain the editable attachment\n      // and copy the content of the attachment into it.\n      showElementById('editFrame');\n\n      var editFrame = document.getElementById('editFrame');\n      editFrame.value = theContent;\n      editFrame.value += \"\\n\\n\";\n    }\n  function undoEditAsComment()\n    {\n      // Hide the \"edit attachment as comment\" TEXTAREA and the \"undo\" button.\n      hideElementById('undoEditButton');\n      hideElementById('editFrame');\n\n      // Show the \"view attachment\" IFRAME, the \"redo\" button that allows the user\n      // to go back to editing the attachment as a comment, and the small comment field.\n      showElementById('viewFrame');\n      showElementById('redoEditButton');\n      showElementById('smallCommentFrame');\n\n    }\n  function redoEditAsComment()\n    {\n      // Hide the \"view attachment\" IFRAME, the \"redo\" button that allows the user\n      // to go back to editing the attachment as a comment, and the small comment field.\n      hideElementById('viewFrame');\n      hideElementById('redoEditButton');\n      hideElementById('smallCommentFrame');\n\n      // Show the \"edit attachment as comment\" TEXTAREA and the \"undo\" button.\n      showElementById('undoEditButton');\n      showElementById('editFrame');\n    }\n\n  function hideElementById(id)\n  {\n    var elm = document.getElementById(id);\n    if (elm) {\n      elm.style.display = 'none';\n    }\n  }\n\n  function showElementById(id, val)\n  {\n    var elm = document.getElementById(id);\n    if (elm) {\n      if (!val) val = 'inline';\n      elm.style.display = val;\n    }\n  }\n\n  function normalizeComments()\n  {\n    // Remove the unused comment field from the document so its contents\n    // do not get transmitted back to the server.\n\n    var small = document.getElementById('smallCommentFrame');\n    var big = document.getElementById('editFrame');\n    if ( small.style.display == 'none' )\n    {\n      small.parentNode.removeChild(small);\n    }\n    if ( big.style.display == 'none' )\n    {\n      big.parentNode.removeChild(big);\n    }\n  }\n  //-->\n</script>\n\n<form method=\"post\" action=\"attachment.cgi\" onsubmit=\"normalizeComments();\">\n  <input type=\"hidden\" name=\"id\" value=\"";
    $output .=  $stash->get('attachid');
    $output .=  "\">\n  <input type=\"hidden\" name=\"action\" value=\"update\">\n  <input type=\"hidden\" name=\"contenttypemethod\" value=\"manual\">\n\n  <table width=\"100%\">\n\n    <tr>\n      <td width=\"25%\">\n        <small>\n        <b>Description:</b><br>\n          <textarea rows=\"3\" cols=\"25\" name=\"description\" wrap=\"soft\">";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('description');
        
        &$filter($output);
    };
    
    $output .=  "</textarea><br>\n\n        <b>MIME Type:</b><br>\n          <input type=\"text\" size=\"20\" name=\"contenttypeentry\" value=\"";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('contenttype');
        
        &$filter($output);
    };
    
    $output .=  "\"><br>\n\n        <b>Flags:</b><br>\n          <input type=\"checkbox\" name=\"ispatch\" value=\"1\"";
    if ($stash->get('ispatch')) {
    $output .=  ' checked';
    }
    
    $output .=  ">patch\n          <input type=\"checkbox\" name=\"isobsolete\" value=\"1\"";
    if ($stash->get('isobsolete')) {
    $output .=  ' checked';
    }
    
    $output .=  ">obsolete<br>\n";
    if ($stash->get(['statusdefs', 0, 'size', 0])) {
    $output .=  "\n          <b>Status:</b><br>";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('statusdefs');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'def'} = $value;
    $output .=  "\n                <input type=\"checkbox\" name=\"status\" value=\"";
    $output .=  $stash->get(['def', 0, 'id', 0]);
    $output .=  "\"";
    if ($stash->get(['statuses', 0, $stash->get(['def', 0, 'id', 0]), 0])) {
    $output .=  ' checked';
    }
    
    $output .=  ">";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['def', 0, 'name', 0]);
        
        &$filter($output);
    };
    
    $output .=  "<br>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    }
    
    $output .=  "\n\n        <div id=\"smallCommentFrame\">\n          <b>Comment (on the bug):</b><br>\n            <textarea name=\"comment\" rows=\"5\" cols=\"25\" wrap=\"soft\"></textarea><br>\n        </div>\n\n        <input type=\"submit\" value=\"Submit\">\n\n        </small>\n      </td>\n";
    if ($stash->get('isviewable')) {
    $output .=  "\n        <td width=\"75%\">\n          <textarea id=\"editFrame\" name=\"comment\" style=\"height: 400px; width: 100%; display: none;\" cols=\"80\" wrap=\"soft\"></textarea>\n          <iframe id=\"viewFrame\" src=\"attachment.cgi?id=";
    $output .=  $stash->get('attachid');
    $output .=  "&amp;action=view\" style=\"height: 400px; width: 100%;\">\n            <b>You cannot view the attachment while editing it because your browser does not support IFRAMEs.\n            <a href=\"attachment.cgi?id=";
    $output .=  $stash->get('attachid');
    $output .=  "&amp;action=view\">View the attachment on a separate page</a>.</b>\n          </iframe>\n          <script type=\"application/x-javascript\" language=\"JavaScript\">\n            <!--\n            if (typeof document.getElementById == \"function\") {\n              document.write('<button type=\"button\" id=\"editButton\" onclick=\"editAsComment();\">Edit Attachment As Comment</button>');\n              document.write('<button type=\"button\" id=\"undoEditButton\" onclick=\"undoEditAsComment();\" style=\"display: none;\">Undo Edit As Comment</button>');\n              document.write('<button type=\"button\" id=\"redoEditButton\" onclick=\"redoEditAsComment();\" style=\"display: none;\">Redo Edit As Comment</button>');\n            }\n            //-->\n          </script>\n        </td>";
    }
    else {
    $output .=  "\n        <td id=\"noview\" width=\"50%\">\n          <p><b>\n            Attachment cannot be viewed because its MIME type is not either text/*, image/*, or application/vnd.mozilla.*.\n            <a href=\"attachment.cgi?id=";
    $output .=  $stash->get('attachid');
    $output .=  "&amp;action=view\">Download the attachment instead</a>.\n          </b></p>\n        </td>";
    }
    
    $output .=  "\n\n    </tr>\n\n  </table>\n\n  Attachments on this Bug:";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('attachments');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'a'} = $value;
    if ($stash->get('a') eq $stash->get('attachid')) {
    $output .=  "\n      #";
    $output .=  $stash->get('a');
    }
    else {
    $output .=  "\n      <a href=\"attachment.cgi?id=";
    $output .=  $stash->get('a');
    $output .=  "&amp;action=edit\">#";
    $output .=  $stash->get('a');
    $output .=  "</a>";
    }
    
    if (!($stash->get(['loop', 0, 'last', 0]))) {
    $output .=  ' |';
    }
    ;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n\n</form>\n\n<br>\n";
    $output .=  $context->process('global/footer.html.tmpl');
    $output .=  "\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
