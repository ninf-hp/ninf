#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.09
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1024779801',
        'name' => 'bug/comments.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "<!-- 1.0\@bugzilla.org -->\n";
    $output .=  "\n";
    $stash->set('start_at', 0, 1);
    $stash->set('count', 0);
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('comments');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'comment'} = $value;
    if ($stash->get('count') >= $stash->get('start_at')) {
    $output .=  $context->process('a_comment');
    }
    
    $output .=  "\n  ";
    $stash->set('count', $stash->get('count') + 1);;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n\n\n";
    $output .=  "\n";
    $output .=  "\n";
    $output .=  "\n";
    $output .=  "\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {
        'a_comment' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $error;
            
            eval { BLOCK: {
        if ($stash->get('count') > 0) {
        $output .=  "\n    <br>\n    <i>------- Additional Comment\n      <a name=\"c";
        $output .=  $stash->get('count');
        $output .=  "\" href=\"#c";
        $output .=  $stash->get('count');
        $output .=  "\">#";
        $output .=  $stash->get('count');
        $output .=  "</a> From \n      <a href=\"mailto:";
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['comment', 0, 'email', 0]);
            
            &$filter($output);
        };
        
        $output .=  "\">";
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['comment', 0, 'name', 0]);
            
            &$filter($output);
        };
        
        $output .=  "</a>\n      ";
        $output .=  $stash->get(['comment', 0, 'time', 0]);
        $output .=  " -------\n    </i>";
        }
        
        $output .=  "\n    \n";
        $output .=  "\n<pre>";
        $output .=  $stash->get(['quoteUrls', [ $stash->get(['comment', 0, 'body', 0]) ]]);
        $output .=  "</pre>";
            } };
            if ($@) {
                $error = $context->catch($@, \$output);
                die $error unless $error->type eq 'return';
            }
        
            return $output;
        },
    },
});
