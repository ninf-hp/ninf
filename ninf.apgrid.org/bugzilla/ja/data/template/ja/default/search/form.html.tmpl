#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.09
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1081929522',
        'name' => 'search/form.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "<!-- 1.0\@bugzilla.org -->\n";
    $output .=  "\n";
    $stash->set('fielddesc', { '[Bug creation]' => '[バグ報告日]', 'assigned_to' => '担当者', 'bug_file_loc' => 'URL', 'bug_severity' => '重要度', 'bug_status' => 'ステータス', 'component' => 'コンポーネント', 'keywords' => 'キーワード', 'op_sys' => 'OS', 'priority' => '優先順位', 'product' => 'プロダクト', 'qa_contact' => 'QAコンタクト', 'rep_platform' => 'プラットフォーム', 'reporter' => '報告者', 'resolution' => '処理方法', 'short_desc' => '要約', 'status_whiteboard' => 'ホワイトボード', 'target_milestone' => 'マイルストーン', 'version' => 'バージョン', 'votes' => '投票'  });
    $output .=  "\n\n\n  ";
    $output .=  "\n\n<script language=\"JavaScript\" type=\"text/javascript\"> <!--\n\nvar first_load = true;         ";
    $output .=  "\nvar last_sel = new Array();    ";
    $output .=  "\n\nvar cpts = new Array();\nvar vers = new Array();";
    if ($stash->get(['Param', [ 'usetargetmilestone' ]])) {
    $output .=  "\nvar tms = new Array();";
    }
    
    $output .=  "\n\n";
    $output .=  "\n";
    $stash->set('n', 0);
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('product');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'p'} = $value;
    $output .=  "\n  cpts[";
    $output .=  $stash->get('n');
    $output .=  "] = [ ";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get(['componentsbyproduct', 0, $stash->get('p'), 0]);
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'item'} = $value;
    $output .=  "'";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('item');
        
        &$filter($output);
    };
    
    $output .=  "'";
    if (!($stash->get(['loop', 0, 'last', 0]))) {
    $output .=  ', ';
    }
    ;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  " ];\n  vers[";
    $output .=  $stash->get('n');
    $output .=  "] = [ ";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get(['versionsbyproduct', 0, $stash->get('p'), 0]);
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'item'} = $value;
    $output .=  "'";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('item');
        
        &$filter($output);
    };
    
    $output .=  "'";
    if (!($stash->get(['loop', 0, 'last', 0]))) {
    $output .=  ', ';
    }
    ;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  " ];";
    if ($stash->get(['Param', [ 'usetargetmilestone' ]])) {
    $output .=  "\n  tms[";
    $output .=  $stash->get('n');
    $output .=  "]  = [ ";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get(['milestonesbyproduct', 0, $stash->get('p'), 0]);
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'item'} = $value;
    $output .=  "'";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('item');
        
        &$filter($output);
    };
    
    $output .=  "'";
    if (!($stash->get(['loop', 0, 'last', 0]))) {
    $output .=  ', ';
    }
    ;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  " ];";
    }
    
    $stash->set('n', $stash->get('n') + 1);;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n\n";
    $output .=  "\n\nfunction updateSelect(array, sel, target, merging) {\n        \n    var i, item;\n\n    ";
    $output .=  "\n    if (array.length < 1) {\n        target.options.length = 0;\n        return false;\n    }\n\n    if (merging) {\n        ";
    $output .=  "\n        ";
    $output .=  "\n        item = merge_arrays(array[sel[0]], target.options, 1);\n\n        ";
    $output .=  "\n        for (i = 1 ; i < sel.length ; i++) {\n            item = merge_arrays(array[sel[i]], item, 0);\n        }\n    } else if ( sel.length > 1 ) {\n        ";
    $output .=  "\n        item = merge_arrays(array[sel[0]],array[sel[1]], 0);\n\n        ";
    $output .=  "\n        for (i = 2; i < sel.length; i++) {\n            item = merge_arrays(item, array[sel[i]], 0);\n        }\n    } else { ";
    $output .=  "\n        item = array[sel[0]];\n    }\n\n    ";
    $output .=  "\n    target.options.length = 0;\n\n    ";
    $output .=  "\n    for (i = 0; i < item.length; i++) {\n        target.options[i] = new Option(item[i], item[i]);\n    }\n    return true;\n}\n\n";
    $output .=  "\nfunction fake_diff_array(a, b) {\n    var newsel = new Array();\n    var found = false;\n\n    ";
    $output .=  "\n    for (var ia in a) {\n        for (var ib in b) {\n            if (a[ia] == b[ib]) {\n                found = true;\n            }\n        }\n        if (!found) {\n            newsel[newsel.length] = a[ia];\n        }\n        found = false;\n    }\n    return newsel;\n}\n\n";
    $output .=  "\nfunction merge_arrays(a, b, b_is_select) {\n    var pos_a = 0;\n    var pos_b = 0;\n    var ret = new Array();\n    var bitem, aitem;\n\n    ";
    $output .=  "\n    while ((pos_a < a.length) && (pos_b < b.length)) {\n        if (b_is_select) {\n            bitem = b[pos_b].value;\n        } else {\n            bitem = b[pos_b];\n        }\n        aitem = a[pos_a];\n\n        ";
    $output .=  "\n        if (aitem.toLowerCase() < bitem.toLowerCase()) {\n            ret[ret.length] = aitem;\n            pos_a++;\n        } else {\n            ";
    $output .=  "\n            if (aitem.toLowerCase() > bitem.toLowerCase()) {\n                ret[ret.length] = bitem;\n                pos_b++;\n            } else {\n                ";
    $output .=  "\n                ret[ret.length] = aitem;\n                pos_a++;\n                pos_b++;\n            }\n        }\n    }\n\n    ";
    $output .=  "\n    if (pos_a < a.length) {\n        for (; pos_a < a.length ; pos_a++) {\n            ret[ret.length] = a[pos_a];\n        }\n    }\n\n    if (pos_b < b.length) {\n        for (; pos_b < b.length; pos_b++) {\n            if (b_is_select) {\n                bitem = b[pos_b].value;\n            } else {\n                bitem = b[pos_b];\n            }\n            ret[ret.length] = bitem;\n        }\n    }\n    return ret;\n}\n\n";
    $output .=  "\nfunction get_selection(control, findall, want_values) {\n    var ret = new Array();\n\n    if ((!findall) && (control.selectedIndex == -1)) {\n        return ret;\n    }\n\n    for (var i=0; i<control.length; i++) {\n        if (findall || control.options[i].selected) {\n            ret[ret.length] = want_values ? control.options[i].value : i;\n        }\n    }\n    return ret;\n}\n\n";
    $output .=  "\nfunction restoreSelection(control, selnames) {\n    ";
    $output .=  "\n    for (var j=0; j < selnames.length; j++) {\n        for (var i=0; i < control.options.length; i++) {\n            if (control.options[i].value == selnames[j]) {\n                control.options[i].selected = true;\n            }\n        }\n    }\n}\n\n";
    $output .=  "\nfunction selectProduct(f) {\n    ";
    $output .=  "\n    if ((!f) || (!f.product)) {\n        return;\n    }\n\n    ";
    $output .=  "\n    if ((first_load) && (f.product.selectedIndex == -1)) {\n        first_load = false;\n        return;\n    }\n    \n    ";
    $output .=  "\n    first_load = false;\n\n    ";
    $output .=  "\n    var merging = false;\n    var sel = Array();\n\n    ";
    $output .=  "\n    var findall = f.product.selectedIndex == -1;\n    sel = get_selection(f.product, findall, false);\n    if (!findall) {\n        ";
    $output .=  "\n        var tmp = sel;\n    \n        ";
    $output .=  "\n        if ((last_sel.length > 0) && (last_sel.length < sel.length)) {\n            sel = fake_diff_array(sel, last_sel);\n            merging = true;\n        }\n        last_sel = tmp;\n    }\n    ";
    $output .=  "\n    var saved_cpts = get_selection(f.component, false, true);\n    var saved_vers = get_selection(f.version, false, true);";
    if ($stash->get(['Param', [ 'usetargetmilestone' ]])) {
    $output .=  "\n    var saved_tms = get_selection(f.target_milestone, false, true);";
    }
    
    $output .=  "\n\n    ";
    $output .=  "\n    updateSelect(cpts, sel, f.component, merging);\n    restoreSelection(f.component, saved_cpts);\n    updateSelect(vers, sel, f.version, merging);\n    restoreSelection(f.version, saved_vers);";
    if ($stash->get(['Param', [ 'usetargetmilestone' ]])) {
    $output .=  "\n    updateSelect(tms, sel, f.target_milestone, merging);\n    restoreSelection(f.target_milestone, saved_tms);";
    }
    
    $output .=  "\n}\n\n// -->\n</script>\n";
    $stash->set('query_variants', [ { 'value' => 'allwordssubstr', 'description' => 'すべての単語/文字列を含む'  }, { 'value' => 'anywordssubstr', 'description' => 'いずれかの単語/文字列を含む'  }, { 'value' => 'substring', 'description' => '文字列を含む'  }, { 'value' => 'casesubstring', 'description' => '文字列を含む(大文字小文字を区別する)'  }, { 'value' => 'allwords', 'description' => 'すべての単語を含む'  }, { 'value' => 'anywords', 'description' => 'いずれかの単語を含む'  }, { 'value' => 'regexp', 'description' => '正規表現に一致する'  }, { 'value' => 'notregexp', 'description' => '正規表現に一致しない'  } ]);
    $output .=  "\n     \n";
    $output .=  "\n\n<table>\n  <tr>\n    <th align=\"right\">要約:</th>\n    <td>\n      <select name=\"short_desc_type\">";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('query_variants');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'qv'} = $value;
    $output .=  "\n        <option value=\"";
    $output .=  $stash->get(['qv', 0, 'value', 0]);
    $output .=  "\"";
    if ($stash->get(['default', 0, 'short_desc_type', 0, 0, 0]) eq $stash->get(['qv', 0, 'value', 0])) {
    $output .=  ' selected';
    }
    
    $output .=  ">";
    $output .=  $stash->get(['qv', 0, 'description', 0]);
    $output .=  "</option>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "              \n      </select>\n    </td>\n    <td>\n      <input name=\"short_desc\" size=\"40\" value=\"";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['default', 0, 'short_desc', 0, 0, 0]);
        
        &$filter($output);
    };
    
    $output .=  "\">\n    </td>\n    <td>\n      <input type=\"submit\" value=\"";
    $output .=  $stash->get('button_name');
    $output .=  "\">\n    </td>\n  </tr>  \n\n";
    $output .=  "\n\n  <tr>\n    <td colspan=\"4\">\n      <table>\n        <tr valign=\"bottom\">\n          <th align=\"left\">プロダクト:</th>\n          <th align=\"left\"><a href=\"describecomponents.cgi\">コンポーネント</a>:</th>\n          <th align=\"left\">バージョン:</th>\n";
    if (($stash->get(['Param', [ 'usetargetmilestone' ]]))) {
    $output .=  "\n          <th align=\"left\">ターゲット:</th>";
    }
    
    $output .=  "\n        </tr>\n\n        <tr valign=\"top\">\n\n          ";
    $output .=  "\n          <td align=\"left\">\n            <select name=\"product\" multiple=\"multiple\" size=\"5\" onchange=\"selectProduct(this.form);\">";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('product');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'p'} = $value;
    $output .=  "\n              <option value=\"";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('p');
        
        &$filter($output);
    };
    
    $output .=  "\"";
    if ($stash->get(['lsearch', [ $stash->get(['default', 0, 'product', 0]), $stash->get('p') ]]) ne -1) {
    $output .=  ' selected';
    }
    
    $output .=  ">";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('p');
        
        &$filter($output);
    };
    
    $output .=  "</option>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n            </select>\n          </td>\n\n          <td align=\"left\">\n            <select name=\"component\" multiple=\"multiple\" size=\"5\">";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('component_');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'c'} = $value;
    $output .=  "\n              <option value=\"";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('c');
        
        &$filter($output);
    };
    
    $output .=  "\"";
    if ($stash->get(['lsearch', [ $stash->get(['default', 0, 'component', 0]), $stash->get('c') ]]) ne -1) {
    $output .=  ' selected';
    }
    
    $output .=  ">";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('c');
        
        &$filter($output);
    };
    
    $output .=  "</option>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n            </select>\n          </td>\n";
    $output .=  $context->process('select', { 'sel' => { 'name' => 'version', 'size' => 5  } });
    $output .=  "\n";
    if ($stash->get(['Param', [ 'usetargetmilestone' ]]) && $stash->get(['target_milestone', 0, 'size', 0]) > 0) {
    $output .=  $context->process('select', { 'sel' => { 'name' => 'target_milestone', 'size' => 5  } });
    }
    
    $output .=  "\n        </tr>\n      </table>\n    </td>\n  </tr>\n  \n";
    $output .=  "\n";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = [ { 'name' => 'long_desc', 'description' => 'コメント'  }, { 'name' => 'bug_file_loc', 'description' => 'URL'  }, { 'name' => 'status_whiteboard', 'description' => 'ホワイトボード'  } ];
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'field'} = $value;
    $output .=  "\n";
    if (!($stash->get(['field', 0, 'name', 0]) eq 'status_whiteboard' && ! $stash->get(['Param', [ 'usestatuswhiteboard' ]]))) {
    $output .=  "\n    <tr>\n      <th align=\"right\">";
    $output .=  $stash->get(['field', 0, 'description', 0]);
    $output .=  ":</th>\n      <td>\n        <select name=\"";
    $output .=  $stash->get(['field', 0, 'name', 0]);
    $output .=  "_type\">";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('query_variants');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'qv'} = $value;
    $stash->set('type', ($stash->get(['field', 0, 'name', 0]) . "_type"));
    $output .=  "                   \n          <option value=\"";
    $output .=  $stash->get(['qv', 0, 'value', 0]);
    $output .=  "\"";
    if ($stash->get(['default', 0, $stash->get('type'), 0, 0, 0]) eq $stash->get(['qv', 0, 'value', 0])) {
    $output .=  ' selected';
    }
    
    $output .=  ">";
    $output .=  $stash->get(['qv', 0, 'description', 0]);
    $output .=  "</option>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "              \n        </select>\n      </td>\n      <td><input name=\"";
    $output .=  $stash->get(['field', 0, 'name', 0]);
    $output .=  "\" size=\"40\" value=\"";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['default', 0, $stash->get(['field', 0, 'name', 0]), 0, 0, 0]);
        
        &$filter($output);
    };
    
    $output .=  "\">\n      </td>\n      <td></td>\n    </tr>  ";
    }
    ;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n";
    if ($stash->get('have_keywords')) {
    $output .=  "\n    <tr>\n      <th align=\"right\"><a href=\"describekeywords.cgi\">キーワード</a>:</th>\n      <td>\n        <select name=\"keywords_type\">";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = [ { 'name' => 'allwords', 'description' => 'すべてのキーワードを含む'  }, { 'name' => 'anywords', 'description' => 'いずれかのキーワードを含む'  }, { 'name' => 'nowords', 'description' => 'どのキーワードも含まない'  } ];
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'qv'} = $value;
    $output .=  "\n\n          <option value=\"";
    $output .=  $stash->get(['qv', 0, 'name', 0]);
    $output .=  "\"";
    if ($stash->get(['default', 0, 'keywords_type', 0, 0, 0]) eq $stash->get(['qv', 0, 'name', 0])) {
    $output .=  ' selected';
    }
    
    $output .=  ">";
    $output .=  $stash->get(['qv', 0, 'description', 0]);
    $output .=  "</option>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n        </select>\n      </td>\n      <td>\n        <input name=\"keywords\" size=\"40\" value=\"";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['default', 0, 'keywords', 0, 0, 0]);
        
        &$filter($output);
    };
    
    $output .=  "\">\n      </td>\n    </tr>";
    }
    
    $output .=  "\n</table>  \n\n<hr>\n\n";
    $output .=  "\n\n<table>\n  <tr>\n    <th align=\"left\"><a href=\"queryhelp.cgi#status\">ステータス</a>:</th>\n    <th align=\"left\"><a href=\"queryhelp.cgi#resolution\">処理方法</a>:</th>\n    <th align=\"left\"><a href=\"queryhelp.cgi#severity\">重要度</a>:</th>\n    <th align=\"left\"><a href=\"queryhelp.cgi#priority\">優先順位</a>:</th>\n    <th align=\"left\"><a href=\"queryhelp.cgi#platform\">プラットフォーム</a>:</th>\n    <th align=\"left\"><a href=\"queryhelp.cgi#opsys\">OS</a>:</th>\n  </tr>\n\n  <tr valign=\"top\">";
    $output .=  $context->process('select', { 'sel' => { 'name' => 'bug_status', 'size' => 7  } });
    $output .=  $context->process('select', { 'sel' => { 'name' => 'resolution', 'size' => 7  } });
    $output .=  $context->process('select', { 'sel' => { 'name' => 'bug_severity', 'size' => 7  } });
    $output .=  "    ";
    $output .=  $context->process('select', { 'sel' => { 'name' => 'priority', 'size' => 7  } });
    $output .=  "    ";
    $output .=  $context->process('select', { 'sel' => { 'name' => 'rep_platform', 'size' => 7  } });
    $output .=  $context->process('select', { 'sel' => { 'name' => 'op_sys', 'size' => 7  } });
    $output .=  "\n  </tr>\n</table>\n\n<p>\n\n";
    $output .=  "\n\n<table>\n  <tr>\n    <td>\n      <fieldset>\n        <legend>\n          <strong>\n            <a href=\"queryhelp.cgi#peopleinvolved\">メールアドレス</a> と番号\n          </strong>  \n        </legend>\n\n\n<table>\n  <tr>";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = [ 1, 2 ];
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'n'} = $value;
    $output .=  "\n    <td>\n\n\n<table cellspacing=\"0\" cellpadding=\"0\">\n  <tr>\n    <td>\n      一致項目:\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <input type=\"checkbox\" name=\"emailassigned_to";
    $output .=  $stash->get('n');
    $output .=  "\" \n             id=\"emailassigned_to";
    $output .=  $stash->get('n');
    $output .=  "\" value=\"1\"";
    if ($stash->get(['default', 0, 'emailassigned_to', 0, $stash->get('n'), 0])) {
    $output .=  ' checked';
    }
    
    $output .=  ">\n      <label for=\"emailassigned_to";
    $output .=  $stash->get('n');
    $output .=  "\">\n        バグの担当者\n      </label>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <input type=\"checkbox\" name=\"emailreporter";
    $output .=  $stash->get('n');
    $output .=  "\" \n             id=\"emailreporter";
    $output .=  $stash->get('n');
    $output .=  "\" value=\"1\"";
    if ($stash->get(['default', 0, 'emailreporter', 0, $stash->get('n'), 0])) {
    $output .=  ' checked';
    }
    
    $output .=  ">\n      <label for=\"emailreporter";
    $output .=  $stash->get('n');
    $output .=  "\">\n        報告者\n      </label>\n    </td>\n  </tr>";
    if ($stash->get(['Param', [ 'useqacontact' ]])) {
    $output .=  "\n  <tr>\n    <td>\n      <input type=\"checkbox\" name=\"emailqa_contact";
    $output .=  $stash->get('n');
    $output .=  "\" \n             id=\"emailqa_contact";
    $output .=  $stash->get('n');
    $output .=  "\" value=\"1\"";
    if ($stash->get(['default', 0, 'emailqa_contact', 0, $stash->get('n'), 0])) {
    $output .=  ' checked';
    }
    
    $output .=  ">\n      <label for=\"emailqa_contact";
    $output .=  $stash->get('n');
    $output .=  "\">\n        QA コンタクト\n      </label>\n    </td>\n  </tr>";
    }
    
    $output .=  "\n  <tr>\n    <td>\n      <input type=\"checkbox\" name=\"emailcc";
    $output .=  $stash->get('n');
    $output .=  "\" \n             id=\"emailcc";
    $output .=  $stash->get('n');
    $output .=  "\" value=\"1\"";
    if ($stash->get(['default', 0, 'emailcc', 0, $stash->get('n'), 0])) {
    $output .=  ' checked';
    }
    
    $output .=  ">\n      <label for=\"emailcc";
    $output .=  $stash->get('n');
    $output .=  "\">\n        CC\n      </label>\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <input type=\"checkbox\" name=\"emaillongdesc";
    $output .=  $stash->get('n');
    $output .=  "\" \n               id=\"emaillongdesc";
    $output .=  $stash->get('n');
    $output .=  "\" value=\"1\"";
    if ($stash->get(['default', 0, 'emaillongdesc', 0, $stash->get('n'), 0])) {
    $output .=  ' checked';
    }
    
    $output .=  ">\n      <label for=\"emaillongdesc";
    $output .=  $stash->get('n');
    $output .=  "\">\n        コメントした人\n      </label>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <input name=\"email";
    $output .=  $stash->get('n');
    $output .=  "\" size=\"25\" value=\"";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['default', 0, 'email', 0, $stash->get('n'), 0]);
        
        &$filter($output);
    };
    
    $output .=  "\">\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <select name=\"emailtype";
    $output .=  $stash->get('n');
    $output .=  "\">";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = [ { 'name' => 'substring', 'description' => 'を含む'  }, { 'name' => 'exact', 'description' => 'に一致'  }, { 'name' => 'regexp', 'description' => '正規表現に一致'  }, { 'name' => 'notregexp', 'description' => '正規表現に一致しない'  } ];
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'qv'} = $value;
    $output .=  "\n        \n        <option value=\"";
    $output .=  $stash->get(['qv', 0, 'name', 0]);
    $output .=  "\"";
    if ($stash->get(['default', 0, 'emailtype', 0, $stash->get('n'), 0]) eq $stash->get(['qv', 0, 'name', 0])) {
    $output .=  ' selected';
    }
    
    $output .=  ">";
    $output .=  $stash->get(['qv', 0, 'description', 0]);
    $output .=  "</option>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n      </select>\n    </td>\n  </tr>\n</table>\n\n    \n    </td>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n  </tr>\n</table>\n<hr>\n<table>  \n  <tr>\n    <td>\n      バグ番号: \n    </td>\n    <td>\n      <input type=\"text\" name=\"bug_id\" value=\"";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['default', 0, 'bug_id', 0, 0, 0]);
        
        &$filter($output);
    };
    
    $output .=  "\" size=\"20\">\n      <select name=\"bugidtype\">\n        <option value=\"include\"";
    if ($stash->get(['default', 0, 'bugidtype', 0, 0, 0]) eq 'include') {
    $output .=  ' selected';
    }
    
    $output .=  ">のみを含む</option>\n        <option value=\"exclude\"";
    if ($stash->get(['default', 0, 'bugidtype', 0, 0, 0]) eq 'exclude') {
    $output .=  ' selected';
    }
    
    $output .=  ">を除外する</option>\n      </select>\n    </td>\n  </tr>\n  <tr>\n    <td></td>\n    <td>(コンマで分けられたリスト)</td>\n  </tr>";
    if ($stash->get(['Param', [ 'usevotes' ]])) {
    $output .=  "\n    <tr>\n      <td colspan=\"2\">\n        <input name=\"votes\" size=\"3\" value=\"";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['default', 0, 'votes', 0, 0, 0]);
        
        &$filter($output);
    };
    
    $output .=  "\"> 票以上の投票があるバグのみ\n      </td>\n    </tr>";
    }
    
    $output .=  "\n</table>\n\n\n      </fieldset>\n    </td>\n   \n";
    $output .=  "\n\n    <td valign=\"top\">\n      <fieldset>\n        <legend><strong>バグの変更</strong></legend>\n\n\n<dl>\n  <dt>次の期間に更新されたバグのみ </dt>\n  <dd>過去 <input name=\"changedin\" size=\"3\" value=\"";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['default', 0, 'changedin', 0, 0, 0]);
        
        &$filter($output);
    };
    
    $output .=  "\"> 日以内</dd>\n</dl>\n\n<dl>\n  <dt>この項目が</dt>\n  <dd>\n    <select name=\"chfield\" multiple=\"multiple\" size=\"4\">";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('chfield');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'field'} = $value;
    $output .=  "\n      <option value=\"";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('field');
        
        &$filter($output);
    };
    
    $output .=  "\"";
    if ($stash->get(['lsearch', [ $stash->get(['default', 0, 'chfield', 0]), $stash->get('field') ]]) ne -1) {
    $output .=  ' selected';
    }
    
    $output .=  ">";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['fielddesc', 0, $stash->get('field'), 0]) || $stash->get('field');
        
        &$filter($output);
    };
    
    $output .=  "</option>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n    </select>\n  </dd>\n\n  <dt>この期間内に変更されたバグのみ</dt>\n  <dd>\n    <input name=\"chfieldfrom\" size=\"10\" value=\"";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['default', 0, 'chfieldfrom', 0, 0, 0]);
        
        &$filter($output);
    };
    
    $output .=  "\">\n    から <input name=\"chfieldto\" size=\"10\" value=\"";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['default', 0, 'chfieldto', 0, 0, 0]);
        
        &$filter($output);
    };
    
    $output .=  "\"> まで<br>(YYYY-MM-DD)\n  </dd>\n  <dt>変更後の値: (オプション)</dt>\n  <dd>\n    <input name=\"chfieldvalue\" size=\"20\" value=\"";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['default', 0, 'chfieldvalue', 0, 0, 0]);
        
        &$filter($output);
    };
    
    $output .=  "\">\n  </dd>\n</dl>\n\n\n       </fieldset>\n     </td>\n  </tr>\n</table>\n\n";
    $output .=  "\n\n";
    $output .=  "\n";
    $output .=  "\n";
    $output .=  "\n";
    $output .=  "\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {
        'select' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $error;
            
            eval { BLOCK: {
        $output .=  "\n  <td align=\"left\">\n    <select name=\"";
        $output .=  $stash->get(['sel', 0, 'name', 0]);
        $output .=  "\" multiple=\"multiple\" size=\"";
        $output .=  $stash->get(['sel', 0, 'size', 0]);
        $output .=  "\">";
        
        # FOREACH 
        do {
            my ($value, $error, $oldloop);
            my $list = $stash->get($stash->get(['sel', 0, 'name', 0]));
            
            unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
                $list = Template::Config->iterator($list)
                    || die $Template::Config::ERROR, "\n"; 
            }
        
            ($value, $error) = $list->get_first();
            eval { $oldloop = $stash->get('loop') };
            $stash->set('loop', $list);
            eval {
        LOOP:   while (! $error) {
                    $stash->{'name'} = $value;
        $output .=  "\n      <option value=\"";
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get('name');
            
            &$filter($output);
        };
        
        $output .=  "\"";
        if ($stash->get(['lsearch', [ $stash->get(['default', 0, $stash->get(['sel', 0, 'name', 0]), 0]), $stash->get('name') ]]) ne -1) {
        $output .=  ' selected';
        }
        
        $output .=  ">";
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get('name');
            
            &$filter($output);
        };
        
        $output .=  "</option>";;
                    ($value, $error) = $list->get_next();
                }
            };
            $stash->set('loop', $oldloop);
            die $@ if $@;
            $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
            die $error if $error;
        };
        
        $output .=  "\n    </select>\n  </td>";
            } };
            if ($@) {
                $error = $context->catch($@, \$output);
                die $error unless $error->type eq 'return';
            }
        
            return $output;
        },
    },
});
