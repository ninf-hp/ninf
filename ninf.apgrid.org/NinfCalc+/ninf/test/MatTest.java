import ninf.NinfClient;import ninf.NinfLog;import java.io.*;public class MatTest{  public static void main(String args[]){    int matsize = 103;;    args = NinfClient.parseArg(args);    if (args.length != 0)      matsize = Integer.valueOf(args[0]).intValue();    double a[], b[], c[], c0[];    NinfLog.quiet();    a = new double[matsize * matsize];    b = new double[matsize * matsize];    c = new double[matsize * matsize];    c0 = new double[matsize * matsize];    for (int i = 0; i < matsize; i++)      for (int j = 0; j < matsize; j++){	a[i * matsize + j] = 100.0; //i * matsize +j ; //Math.random();	b[i * matsize + j] = i * matsize +j ;// Math.random();	c[i * matsize + j] = 0;      }        try {      NinfClient tmp = new NinfClient();      System.out.println("NinfCall start.");            tmp.callWith("mmul", new Integer(matsize), a, b, c);      System.out.println("NinfCall done.");    } catch (IOException e){}    mmul(matsize, a, b, c0);    for (int i = 0; i < matsize; i++)      for (int j = 0; j < matsize; j++){	if (c[i * matsize + j] != c0[i * matsize + j]){	  System.out.println("c [" + i +"][" + j + "] =" +  c[i * matsize + j]);	  System.out.println("c0[" + i +"][" + j + "] =" +  c0[i * matsize + j]);	}      }  }  static void mmul(int N, double A[], double B[], double C[]){    double t;    for (int i = 0; i < N; i++) {      for (int j = 0; j < N; j++) {	t = 0;	for (int k = 0; k < N; k++){	  t += A[i*N + k] * B[k*N+j];	/* inner product */	}	C[i*N+j] = t;      }    }  }}