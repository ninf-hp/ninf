#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.09
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1081929521',
        'name' => 'account/prefs/email.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "<!-- 1.0\@bugzilla.org -->\n";
    $output .=  "\n\n";
    $output .=  "\n";
    $stash->set('useqacontact', $stash->get(['Param', [ 'useqacontact' ]]));
    $output .=  "\n \n<table>";
    if ($stash->get(['Param', [ 'supportwatchers' ]])) {
    $output .=  "\n    <tr>\n      <td colspan=\"4\">\n        <hr>\n      </td>\n    </tr>\n\n    <tr>\n      <td colspan=\"4\">\n	休暇に出ている人の作業を代行したり、誰か特定の人に関連したバグ\n        のQAをしたい場合など、Bugzilla がその人に送信するメールを\n        あなたのアドレスにも送信するよう設定できます。\n        チェックしたい人のアドレスをコンマ(,)で区切って入力してください。\n      </td>\n    </tr>\n\n    <tr>\n      <th align=\"right\">チェックしたい人のアドレス:</th>\n      <td>\n        <input size=\"35\" name=\"watchedusers\" value=\"";
    $output .=  $stash->get('watchedusers');
    $output .=  "\">\n      </td>\n    </tr>";
    }
    
    $output .=  "\n\n  <tr>\n    <td colspan=\"2\">\n      <p>\n	バグに関する些細な変更のメールを受け取りたくない場合は、\n        以下の設定項目である程度（またはすべて）のメールをフィルタできます。\n      </p>\n    </td>\n  </tr>\n</table>\n\n<hr>\n\n<table>\n  <tr>\n    <td colspan=\"2\">\n      <b>全体オプション:</b>\n    </td>\n  </tr>\n\n  <tr>\n    <td width=\"150\"></td>\n    <td>\n      自分で送信した変更についてのメールは受け取らない\n      <input type=\"checkbox\" name=\"ExcludeSelf\" value=\"on\"";
    if ($stash->get('excludeself')) {
    $output .=  ' checked';
    }
    
    $output .=  ">\n      <br>\n    </td>\n  </tr>\n</table>\n\n<hr>\n<b>フィールド／受信者別の設定:</b>\n<br>\n<br>\n\n\n<table width=\"100%\" border=\"1\">\n  <tr>\n    <td colspan=\"";
    $output .=  $stash->get('useqacontact') ? '5' : '4';
    $output .=  "\" align=\"center\" width=\"50%\">\n      <b>バグと自分との関連:</b>\n    </td>\n    <td rowspan=\"2\" width=\"50%\">\n      <b>メール通知を受けたい変更:</b>\n    </td>\n  </tr>\n\n  <tr>\n    <td align=\"center\" width=\"10%\">\n      <b>報告者</b>\n    </td>\n    <td align=\"center\" width=\"10%\">\n      <b>担当者</b>\n    </td>";
    if ($stash->get('useqacontact')) {
    $output .=  "\n       <td align=\"center\" width=\"10%\">\n         <b>QAコンタクト</b>\n       </td>";
    }
    
    $output .=  "\n    <td align=\"center\" width=\"10%\">\n      <b>CCリスト内</b>\n    </td>\n    <td align=\"center\" width=\"10%\">\n      <b>投票者</b>\n    </td>\n  </tr>\n";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = [ { 'name' => 'Removeme', 'description' => 'この欄へ追加または除外された'  }, { 'name' => 'Comments', 'description' => 'コメント追加'  }, { 'name' => 'Attachments', 'description' => '添付ファイル追加'  }, { 'name' => 'Status', 'description' => '優先順位、ステータス、重要度、ターゲットマイルストーンの変更'  }, { 'name' => 'Resolved', 'description' => 'バグが RESOLVED または VERIFIED になった'  }, { 'name' => 'Keywords', 'description' => 'キーワード変更'  }, { 'name' => 'CC', 'description' => 'CCリスト変更'  }, { 'name' => 'Other', 'description' => 'その他の変更'  } ];
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'reason'} = $value;
    $output .=  "\n    <tr>";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = [ 'Reporter', 'Owner', 'QAcontact', 'CClist', 'Voter' ];
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'role'} = $value;
    if ($stash->get('role') eq 'QAcontact' && ! $stash->get('useqacontact')) {
    ($value, $error) = $list->get_next();
    next LOOP;
    
    }
    
    $output .=  "\n        <td align=\"center\">\n          <input type=\"checkbox\" name=\"email";
    $output .=  $stash->get('role');
    $output .=  $stash->get(['reason', 0, 'name', 0]);
    $output .=  "\" value=\"on\"";
    if ($stash->get([$stash->get('role'), 0, $stash->get(['reason', 0, 'name', 0]), 0])) {
    $output .=  ' checked';
    }
    
    $output .=  ">\n        </td>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n      <td>";
    $output .=  $stash->get(['reason', 0, 'description', 0]);
    $output .=  "\n      </td>\n    </tr>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n</table>       \n\n<br>\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
