#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.09
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1051217130',
        'name' => 'list/table.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "<!-- 1.0\@bugzilla.org -->\n";
    $output .=  "\n\n";
    $output .=  "\n";
    $output .=  "\n";
    $output .=  "\n\n";
    $stash->set('abbrev', { 'severity' => { 'maxlength' => 3, 'title' => 'Sev'  }, 'priority' => { 'maxlength' => 3, 'title' => 'Pri'  }, 'platform' => { 'maxlength' => 3, 'title' => 'Plt'  }, 'status' => { 'maxlength' => 4  }, 'reporter' => { 'maxlength' => 30, 'ellipsis' => '...'  }, 'owner' => { 'maxlength' => 30, 'ellipsis' => '...'  }, 'qa_contact' => { 'maxlength' => 30, 'ellipsis' => '...', 'title' => 'QAContact'  }, 'resolution' => { 'maxlength' => 4  }, 'summary' => { 'maxlength' => 60, 'ellipsis' => '...', 'wrap' => 1  }, 'summaryfull' => { 'wrap' => 1  }, 'status_whiteboard' => { 'title' => 'StatusSummary', 'wrap' => 1  }, 'component' => { 'maxlength' => 8, 'title' => 'Comp'  }, 'product' => { 'maxlength' => 8  }, 'version' => { 'maxlength' => 5, 'title' => 'Vers'  }, 'os' => { 'maxlength' => 4  }, 'target_milestone' => { 'title' => 'TargetM'  }  });
    $output .=  "\n";
    
    # CAPTURE
    $stash->set('qorder', do {
        my $output = '';
    if ($stash->get('order')) {
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('url_quote')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('order');
        
        &$filter($output);
    };
    
    }
    
        $output;
    });
    
    $output .=  "\n\n";
    $output .=  "\n";
    $output .=  "\n";
    $output .=  "\n";
    
    # CAPTURE
    $stash->set('tableheader', do {
        my $output = '';
    $output .=  "\n  <table class=\"bz_buglist\" cellspacing=\"0\" cellpadding=\"4\" width=\"100%\">\n    <colgroup>\n      <col class=\"bz_id_column\">";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('displaycolumns');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'id'} = $value;
    $output .=  "\n      <col class=\"bz_";
    $output .=  $stash->get('id');
    $output .=  "_column\">";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n    </colgroup>\n\n    <tr align=\"left\">\n      <th colspan=\"";
    $output .=  $stash->get('splitheader') ? 2 : 1;
    $output .=  "\">\n        <a href=\"buglist.cgi?";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('urlquerypart');
        
        &$filter($output);
    };
    
    $output .=  "&amp;order=bugs.bug_id\">ID</a>\n      </th>\n";
    if ($stash->get('splitheader')) {
    $output .=  "\n";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('displaycolumns');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'id'} = $value;
    if (!($stash->get(['loop', 0, 'count', 0]) % 2 eq 0)) {
    ($value, $error) = $list->get_next();
    next LOOP;
    
    }
    
    $stash->set('column', $stash->get(['columns', 0, $stash->get('id'), 0]));
    $output .=  $context->process('columnheader');;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n\n        </tr><tr align=\"left\"><th>&nbsp;</th>\n";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('displaycolumns');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'id'} = $value;
    if ($stash->get(['loop', 0, 'count', 0]) % 2 eq 0) {
    ($value, $error) = $list->get_next();
    next LOOP;
    
    }
    
    $stash->set('column', $stash->get(['columns', 0, $stash->get('id'), 0]));
    $output .=  $context->process('columnheader');;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n";
    }
    else {
    $output .=  "\n";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('displaycolumns');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'id'} = $value;
    $stash->set('column', $stash->get(['columns', 0, $stash->get('id'), 0]));
    $output .=  $context->process('columnheader');;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n";
    }
    
    $output .=  "\n\n    </tr>";
        $output;
    });
    
    $output .=  "\n";
    $output .=  "\n\n\n";
    $output .=  "\n";
    $output .=  "\n";
    $output .=  "\n";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('bugs');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'bug'} = $value;
    if ($stash->get(['loop', 0, 'count', 0]) % 10 eq 1) {
    $output .=  $stash->get('FLUSH');
    }
    
    $output .=  "\n\n  ";
    if ($stash->get(['loop', 0, 'count', 0]) % 100 eq 1) {
    $output .=  $stash->get('tableheader');
    }
    
    $output .=  "\n\n  <tr class=\"bz_";
    $output .=  $stash->get(['bug', 0, 'severity', 0]);
    $output .=  " bz_";
    $output .=  $stash->get(['bug', 0, 'priority', 0]);
    $output .=  " ";
    if (($stash->get(['bug', 0, 'groupset', 0]) && ! $stash->get('usebuggroups'))) {
    $output .=  'bz_secure';
    }
    
    $output .=  "\">\n\n    <td>";
    if ($stash->get('dotweak')) {
    $output .=  "<input type=\"checkbox\" name=\"id_";
    $output .=  $stash->get(['bug', 0, 'id', 0]);
    $output .=  "\">";
    }
    
    $output .=  "\n      <a href=\"show_bug.cgi?id=";
    $output .=  $stash->get(['bug', 0, 'id', 0]);
    $output .=  "\">";
    $output .=  $stash->get(['bug', 0, 'id', 0]);
    $output .=  "</a>\n    </td>\n";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('displaycolumns');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'column'} = $value;
    $output .=  "\n    <td>";
    if (! $stash->get(['abbrev', 0, $stash->get('column'), 0, 'wrap', 0])) {
    $output .=  '<nobr>';
    }
    
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['bug', 0, $stash->get('column'), 0, 'truncate', [ $stash->get(['abbrev', 0, $stash->get('column'), 0, 'maxlength', 0]), $stash->get(['abbrev', 0, $stash->get('column'), 0, 'ellipsis', 0]) ]]);
        
        &$filter($output);
    };
    
    if (! $stash->get(['abbrev', 0, $stash->get('column'), 0, 'wrap', 0])) {
    $output .=  '</nobr>';
    }
    
    $output .=  "\n    </td>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n\n  </tr>\n\n  ";
    if ($stash->get(['loop', 0, 'last', 0]) || $stash->get(['loop', 0, 'count', 0]) % 100 eq 0) {
    $output .=  "\n    </table>";
    }
    
    $output .=  "\n";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {
        'columnheader' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $error;
            
            eval { BLOCK: {
        $output .=  "\n  <th colspan=\"";
        $output .=  $stash->get('splitheader') ? 2 : 1;
        $output .=  "\">\n    <a href=\"buglist.cgi?";
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get('urlquerypart');
            
            &$filter($output);
        };
        
        $output .=  "&amp;order=";
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('html')
                      || $context->throw($context->error);
        
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('url_quote')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['column', 0, 'name', 0]);
            
            &$filter($output);
        };
        
            
            &$filter($output);
        };
        
        if ($stash->get('order')) {
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  ("," . $stash->get('qorder'));
            
            &$filter($output);
        };
        
        }
        
        $output .=  "\">";
        $output .=  $stash->get(['abbrev', 0, $stash->get('id'), 0, 'title', 0]) || $stash->get(['column', 0, 'title', 0]);
        $output .=  "</a>\n  </th>";
            } };
            if ($@) {
                $error = $context->catch($@, \$output);
                die $error unless $error->type eq 'return';
            }
        
            return $output;
        },
    },
});
