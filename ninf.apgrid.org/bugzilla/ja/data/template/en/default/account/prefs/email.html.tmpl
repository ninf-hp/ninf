#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.09
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1026930517',
        'name' => 'account/prefs/email.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "<!-- 1.0\@bugzilla.org -->\n";
    $output .=  "\n\n";
    $output .=  "\n";
    $stash->set('useqacontact', $stash->get(['Param', [ 'useqacontact' ]]));
    $output .=  "\n \n<table>";
    if ($stash->get(['Param', [ 'supportwatchers' ]])) {
    $output .=  "\n    <tr>\n      <td colspan=\"4\">\n        <hr>\n      </td>\n    </tr>\n\n    <tr>\n      <td colspan=\"4\">\n        If you want to help cover for someone when they're on vacation, or if\n        you need to do the QA related to all of their bugs, you can tell \n        Bugzilla to send mail related to their bugs to you also.  List the \n        email addresses of any users you wish to watch here, separated by\n        commas.\n      </td>\n    </tr>\n\n    <tr>\n      <th align=\"right\">Users to watch:</th>\n      <td>\n        <input size=\"35\" name=\"watchedusers\" value=\"";
    $output .=  $stash->get('watchedusers');
    $output .=  "\">\n      </td>\n    </tr>";
    }
    
    $output .=  "\n\n  <tr>\n    <td colspan=\"2\">\n      <p>\n        If you don't like getting a notification for \"trivial\"\n        changes to bugs, you can use the settings below to\n        filter some (or even all) notifications.\n      </p>\n    </td>\n  </tr>\n</table>\n\n<hr>\n\n<table>\n  <tr>\n    <td colspan=\"2\">\n      <b>Global options:</b>\n    </td>\n  </tr>\n\n  <tr>\n    <td width=\"150\"></td>\n    <td>\n      Only email me reports of changes made by other people\n      <input type=\"checkbox\" name=\"ExcludeSelf\" value=\"on\"";
    if ($stash->get('excludeself')) {
    $output .=  ' checked';
    }
    
    $output .=  ">\n      <br>\n    </td>\n  </tr>\n</table>\n\n<hr>\n<b>Field/recipient specific options:</b>\n<br>\n<br>\n\n\n<table width=\"100%\" border=\"1\">\n  <tr>\n    <td colspan=\"";
    $output .=  $stash->get('useqacontact') ? '5' : '4';
    $output .=  "\" align=\"center\" width=\"50%\">\n      <b>When my relationship to this bug is:</b>\n    </td>\n    <td rowspan=\"2\" width=\"50%\">\n      <b>I want to receive mail when:</b>\n    </td>\n  </tr>\n\n  <tr>\n    <td align=\"center\" width=\"10%\">\n      <b>Reporter</b>\n    </td>\n    <td align=\"center\" width=\"10%\">\n      <b>Assignee</b>\n    </td>";
    if ($stash->get('useqacontact')) {
    $output .=  "\n      <td align=\"center\" width=\"10%\">\n        <b>QA Contact</b>\n      </td>";
    }
    
    $output .=  "\n    <td align=\"center\" width=\"10%\">\n      <b>CC</b>\n    </td>\n    <td align=\"center\" width=\"10%\">\n      <b>Voter</b>\n    </td>\n  </tr>\n";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = [ { 'name' => 'Removeme', 'description' => 'I\'m added to or removed from this capacity'  }, { 'name' => 'Comments', 'description' => 'New Comments are added'  }, { 'name' => 'Attachments', 'description' => 'New Attachments are added'  }, { 'name' => 'Status', 'description' => 'Priority, status, severity, and/or milestone changes'  }, { 'name' => 'Resolved', 'description' => 'The bug is resolved or verified'  }, { 'name' => 'Keywords', 'description' => 'Keywords field changes'  }, { 'name' => 'CC', 'description' => 'CC field changes'  }, { 'name' => 'Other', 'description' => 'Any field not mentioned above changes'  } ];
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'reason'} = $value;
    $output .=  "\n    <tr>";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = [ 'Reporter', 'Owner', 'QAcontact', 'CClist', 'Voter' ];
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'role'} = $value;
    if ($stash->get('role') eq 'QAcontact' && ! $stash->get('useqacontact')) {
    ($value, $error) = $list->get_next();
    next LOOP;
    
    }
    
    $output .=  "\n        <td align=\"center\">\n          <input type=\"checkbox\" name=\"email";
    $output .=  $stash->get('role');
    $output .=  $stash->get(['reason', 0, 'name', 0]);
    $output .=  "\" value=\"on\"";
    if ($stash->get([$stash->get('role'), 0, $stash->get(['reason', 0, 'name', 0]), 0])) {
    $output .=  ' checked';
    }
    
    $output .=  ">\n        </td>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n      <td>";
    $output .=  $stash->get(['reason', 0, 'description', 0]);
    $output .=  "\n      </td>\n    </tr>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n</table>       \n\n<br>\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
