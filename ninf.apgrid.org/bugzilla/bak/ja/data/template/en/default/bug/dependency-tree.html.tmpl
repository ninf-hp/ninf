#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.09
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1021271060',
        'name' => 'bug/dependency-tree.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "<!-- 1.0\@bugzilla.org -->\n";
    $output .=  "\n";
    $output .=  $context->process('global/header.html.tmpl', { 'title' => ("Dependency tree for Bug " . $stash->get('bugid')), 'h1' => ("Dependency tree for <a href=\"show_bug.cgi?id=" . $stash->get('bugid') . "\">bug " . $stash->get('bugid') . "</a>"), 'style' => 'strike { background-color: #d9d9d9; color: #000000; }' });
    $output .=  "\n";
    $output .=  $context->process('depthControlToolbar');
    $output .=  "\n\n";
    $output .=  "\n<h3>";
    $output .=  $stash->get('hide_resolved') ? 'Open b' : 'B';
    $output .=  "ugs that <a href=\"show_bug.cgi?id=";
    $output .=  $stash->get('bugid');
    $output .=  "\">bug ";
    $output .=  $stash->get('bugid');
    $output .=  "</a> depends on</h3>";
    if ($stash->get(['dependson_ids', 0, 'size', 0]) > 0) {
    $output .=  "\n  (";
    if ($stash->get('maxdepth')) {
    $output .=  "Up to ";
    $output .=  $stash->get('maxdepth');
    $output .=  " level";
    if ($stash->get('maxdepth') > 1) {
    $output .=  's';
    }
    
    $output .=  " deep | ";
    }
    
    $output .=  "\n  <a href=\"buglist.cgi?bug_id=";
    $output .=  $stash->get(['dependson_ids', 0, 'join', [ ',' ]]);
    $output .=  "\">view as bug list</a>";
    if ($stash->get('canedit') && $stash->get(['dependson_ids', 0, 'size', 0]) > 1) {
    $output .=  "\n    | <a href=\"buglist.cgi?bug_id=";
    $output .=  $stash->get(['dependson_ids', 0, 'join', [ ',' ]]);
    $output .=  "&amp;tweak=1\">change several</a>";
    }
    
    $output .=  ")";
    $output .=  $context->include('display_tree', { 'tree' => $stash->get('dependson_tree'), 'bug_id' => $stash->get('bugid') });
    }
    else {
    $output .=  "\n  </h3>\n  <p>None</p>";
    }
    
    $output .=  "\n\n";
    $output .=  "\n<h3>";
    $output .=  $stash->get('hide_resolved') ? 'Open b' : 'B';
    $output .=  "ugs that <a href=\"show_bug.cgi?id=";
    $output .=  $stash->get('bugid');
    $output .=  "\">bug ";
    $output .=  $stash->get('bugid');
    $output .=  "</a> blocks</h3>";
    if ($stash->get(['blocked_ids', 0, 'size', 0]) > 0) {
    $output .=  "\n  (";
    if ($stash->get('maxdepth')) {
    $output .=  "Up to ";
    $output .=  $stash->get('maxdepth');
    $output .=  " level";
    if ($stash->get('maxdepth') > 1) {
    $output .=  's';
    }
    
    $output .=  " deep | ";
    }
    
    $output .=  "\n  <a href=\"buglist.cgi?bug_id=";
    $output .=  $stash->get(['blocked_ids', 0, 'join', [ ',' ]]);
    $output .=  "\">view as bug list</a>";
    if ($stash->get('canedit') && $stash->get(['blocked_ids', 0, 'size', 0]) > 1) {
    $output .=  "\n    | <a href=\"buglist.cgi?bug_id=";
    $output .=  $stash->get(['blocked_ids', 0, 'join', [ ',' ]]);
    $output .=  "&amp;tweak=1\">change several</a>";
    }
    
    $output .=  ")";
    $output .=  $context->include('display_tree', { 'tree' => $stash->get('blocked_tree'), 'bug_id' => $stash->get('bugid') });
    }
    else {
    $output .=  "\n  </h3>\n  <p>None</p>";
    }
    
    $output .=  "\n";
    $output .=  $context->process('depthControlToolbar');
    $output .=  "\n";
    $output .=  $context->process('global/footer.html.tmpl');
    $output .=  "\n\n\n";
    $output .=  "\n";
    $output .=  "\n";
    $output .=  "\n";
    $output .=  "\n\n";
    $output .=  "\n";
    $output .=  "\n";
    $output .=  "\n";
    $output .=  "\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {
        'depthControlToolbar' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $error;
            
            eval { BLOCK: {
        $output .=  "\n <table cellpadding=\"3\" border=\"0\" cellspacing=\"0\" bgcolor=\"#d0d0d0\">\n <tr>\n   ";
        $output .=  "\n   <td align=\"center\">\n   <form method=\"get\" action=\"showdependencytree.cgi\" \n           style=\"display: inline; margin: 0px;\">\n     <input name=\"id\" type=\"hidden\" value=\"";
        $output .=  $stash->get('bugid');
        $output .=  "\">";
        if ($stash->get('maxdepth')) {
        $output .=  "\n       <input name=\"maxdepth\" type=\"hidden\" value=\"";
        $output .=  $stash->get('maxdepth');
        $output .=  "\">";
        }
        
        $output .=  "\n     <input type=\"hidden\" name=\"hide_resolved\" value=\"";
        $output .=  $stash->get('hide_resolved') ? 0 : 1;
        $output .=  "\">\n     <input type=\"submit\" value=\"";
        $output .=  $stash->get('hide_resolved') ? 'Show' : 'Hide';
        $output .=  " Resolved\">\n   </form>\n   </td>\n\n   <td>\n     Max Depth:\n   </td>\n\n   <td>\n     &nbsp;\n   </td>\n\n   <td>\n   <form method=\"get\" action=\"showdependencytree.cgi\"\n         style=\"display: inline; margin: 0px;\">\n     ";
        $output .=  "\n     <input type=\"submit\" value=\"&nbsp;1&nbsp;\" ";
        $output .=  $stash->get('realdepth') < 2 || $stash->get('maxdepth') eq 1 ? 'disabled' : '';
        $output .=  ">\n     <input name=\"id\" type=\"hidden\" value=\"";
        $output .=  $stash->get('bugid');
        $output .=  "\">\n     <input name=\"maxdepth\" type=\"hidden\" value=\"1\">\n     <input name=\"hide_resolved\" type=\"hidden\" value=\"";
        $output .=  $stash->get('hide_resolved');
        $output .=  "\">\n   </form>\n   </td>\n\n   <td>\n   <form method=\"get\" action=\"showdependencytree.cgi\" \n         style=\"display: inline; margin: 0px;\">\n     ";
        $output .=  "\n     <input name=\"id\" type=\"hidden\" value=\"";
        $output .=  $stash->get('bugid');
        $output .=  "\">\n     <input name=\"maxdepth\" type=\"hidden\" value=\"";
        $output .=  $stash->get('maxdepth') eq 1 ? 1 : ($stash->get('maxdepth') ? $stash->get('maxdepth') - 1 : $stash->get('realdepth') - 1);
        $output .=  "\">\n     <input name=\"hide_resolved\" type=\"hidden\" value=\"";
        $output .=  $stash->get('hide_resolved');
        $output .=  "\">\n     <input type=\"submit\" value=\"&nbsp;&lt;&nbsp;\" ";
        $output .=  $stash->get('realdepth') < 2 || ($stash->get('maxdepth') && $stash->get('maxdepth') < 2) ? 'disabled' : '';
        $output .=  ">\n   </form>\n   </td>\n\n   <td>\n   <form method=\"get\" action=\"showdependencytree.cgi\" \n         style=\"display: inline; margin: 0px;\">\n     ";
        $output .=  "\n     <input name=\"maxdepth\" size=\"4\" maxlength=\"4\" value=\"";
        $output .=  $stash->get('maxdepth') > 0 && $stash->get('maxdepth') <= $stash->get('realdepth') ? $stash->get('maxdepth') : '';
        $output .=  "\">\n     <input name=\"id\" type=\"hidden\" value=\"";
        $output .=  $stash->get('bugid');
        $output .=  "\">\n     <input name=\"hide_resolved\" type=\"hidden\" value=\"";
        $output .=  $stash->get('hide_resolved');
        $output .=  "\">\n     <noscript>\n       <input type=\"submit\" value=\"Change\" ";
        $output .=  $stash->get('realdepth') < 2 ? 'disabled' : '';
        $output .=  ">\n     </noscript>\n   </form>\n   </td>\n\n   <td>\n   <form method=\"get\" action=\"showdependencytree.cgi\" \n         style=\"display: inline; margin: 0px;\">\n     ";
        $output .=  "\n     <input name=\"id\" type=\"hidden\" value=\"";
        $output .=  $stash->get('bugid');
        $output .=  "\">";
        if ($stash->get('maxdepth')) {
        $output .=  "\n       <input name=\"maxdepth\" type=\"hidden\" value=\"";
        $output .=  $stash->get('maxdepth') + 1;
        $output .=  "\">";
        }
        
        $output .=  "\n     <input name=\"hide_resolved\" type=\"hidden\" value=\"";
        $output .=  $stash->get('hide_resolved');
        $output .=  "\">\n     <input type=\"submit\" value=\"&nbsp;&gt;&nbsp;\" ";
        $output .=  $stash->get('realdepth') < 2 || ! $stash->get('maxdepth') || $stash->get('maxdepth') >= $stash->get('realdepth') ? 'disabled' : '';
        $output .=  ">\n   </form>\n   </td>\n\n   <td>\n   <form method=\"get\" action=\"showdependencytree.cgi\" \n         style=\"display: inline; margin: 0px;\">\n     ";
        $output .=  "\n     <input name=\"id\" type=\"hidden\" value=\"";
        $output .=  $stash->get('bugid');
        $output .=  "\">\n     <input name=\"hide_resolved\" type=\"hidden\" value=\"";
        $output .=  $stash->get('hide_resolved');
        $output .=  "\">\n     <input type=\"submit\" value=\"&nbsp;Unlimited&nbsp;\" ";
        $output .=  $stash->get('maxdepth') eq 0 || $stash->get('maxdepth') eq $stash->get('realdepth') ? 'disabled' : '';
        $output .=  ">\n   </form>\n   </td>\n </tr>\n</table>";
            } };
            if ($@) {
                $error = $context->catch($@, \$output);
                die $error unless $error->type eq 'return';
            }
        
            return $output;
        },
        'display_tree' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $error;
            
            eval { BLOCK: {
        $stash->set(['tree', 0, $stash->get('bug_id'), 0, 'seen', 0], 1);
        $output .=  "\n<ul>";
        
        # FOREACH 
        do {
            my ($value, $error, $oldloop);
            my $list = $stash->get(['tree', 0, $stash->get('bug_id'), 0, 'dependencies', 0]);
            
            unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
                $list = Template::Config->iterator($list)
                    || die $Template::Config::ERROR, "\n"; 
            }
        
            ($value, $error) = $list->get_first();
            eval { $oldloop = $stash->get('loop') };
            $stash->set('loop', $list);
            eval {
        LOOP:   while (! $error) {
                    $stash->{'dep_id'} = $value;
        $stash->set('dep', $stash->get(['tree', 0, $stash->get('dep_id'), 0]));
        $output .=  "\n    <li>";
        if (! $stash->get(['dep', 0, 'open', 0])) {
        $output .=  '<strike>';
        }
        
        $output .=  "\n      <a href=\"show_bug.cgi?id=";
        $output .=  $stash->get('dep_id');
        $output .=  "\">";
        $output .=  $stash->get('dep_id');
        $output .=  " \n        [";
        if ($stash->get(['dep', 0, 'milestone', 0])) {
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['dep', 0, 'milestone', 0]);
            
            &$filter($output);
        };
        
        $output .=  ", ";
        }
        
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['dep', 0, 'assignee_email', 0]);
            
            &$filter($output);
        };
        
        $output .=  "] - ";
        if ($stash->get(['dep', 0, 'seen', 0])) {
        $output .=  "\n          <i>This bug appears elsewhere in this tree.</i></a>";
        }
        else {
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['dep', 0, 'summary', 0]);
            
            &$filter($output);
        };
        
        $output .=  ".</a>";
        }
        
        if (! $stash->get(['dep', 0, 'open', 0])) {
        $output .=  '</strike>';
        }
        
        if ($stash->get(['dep', 0, 'dependencies', 0, 'size', 0]) > 0 && ! $stash->get(['dep', 0, 'seen', 0])) {
        $output .=  $context->include('display_tree', { 'bug_id' => $stash->get('dep_id') });
        }
        
        $output .=  "\n    </li>";;
                    ($value, $error) = $list->get_next();
                }
            };
            $stash->set('loop', $oldloop);
            die $@ if $@;
            $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
            die $error if $error;
        };
        
        $output .=  "\n</ul>";
            } };
            if ($@) {
                $error = $context->catch($@, \$output);
                die $error unless $error->type eq 'return';
            }
        
            return $output;
        },
    },
});
