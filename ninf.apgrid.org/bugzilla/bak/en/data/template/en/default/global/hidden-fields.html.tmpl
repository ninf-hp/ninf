#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.09
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1051217126',
        'name' => 'global/hidden-fields.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "<!-- 1.0\@bugzilla.org -->\n";
    $output .=  "\n\n";
    $output .=  "\n \n";
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('form');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'field'} = $value;
    if ($stash->get('exclude') && $stash->get(['field', 0, 'key', 0, 'search', [ $stash->get('exclude') ]])) {
    ($value, $error) = $list->get_next();
    next LOOP;
    
    }
    
    if ($stash->get(['mform', 0, $stash->get(['field', 0, 'key', 0]), 0, 'size', 0]) > 1) {
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get(['mform', 0, $stash->get(['field', 0, 'key', 0]), 0]);
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'mvalue'} = $value;
    $output .=  "\n      <input type=\"hidden\" name=\"";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['field', 0, 'key', 0]);
        
        &$filter($output);
    };
    
    $output .=  "\"\n             value=\"";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html_linebreak')
                  || $context->throw($context->error);
    
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('mvalue');
        
        &$filter($output);
    };
    
        
        &$filter($output);
    };
    
    $output .=  "\">";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    }
    else {
    $output .=  "\n    <input type=\"hidden\" name=\"";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['field', 0, 'key', 0]);
        
        &$filter($output);
    };
    
    $output .=  "\"\n           value=\"";
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html_linebreak')
                  || $context->throw($context->error);
    
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['field', 0, 'value', 0]);
        
        &$filter($output);
    };
    
        
        &$filter($output);
    };
    
    $output .=  "\">";
    }
    ;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
