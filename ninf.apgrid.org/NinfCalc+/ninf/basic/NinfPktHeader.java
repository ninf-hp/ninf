package ninf.basic;import java.io.*;public class NinfPktHeader {  /** error, negative code */  public static final int NINF_PKT_ERROR = -1;  /** none */  public static final int NINF_PKT_NONE = 0;	  /** kill */  public static final int NINF_PKT_KILL = 1;  /** client -> stub */  public static final int NINF_PKT_TO_STUB = 2;  /** stub -> client */  public static final int NINF_PKT_TO_CLIENT =	3;  /** request stub info */  public static final int NINF_PKT_REQ_STUB_INFO = 4;  /** reply stub info */  public static final int NINF_PKT_RPY_STUB_INFO = 5;  /** request call */  public static final int NINF_PKT_REQ_CALL = 6;  /** reply call */  public static final int NINF_PKT_RPY_CALL = 7;  /** request compound stub */  public static final int NINF_PKT_REQ_COMP = 10;  /** NINF_Q_Protocols     req stub index list */  public static final int NINF_PKT_REQ_STUB_INDEX_LIST = 50;  /** rpy stub index list */  public static final int    NINF_PKT_RPY_STUB_INDEX_LIST = 51;         /** req stub by index */  public static final int  NINF_PKT_REQ_STUB_BY_INDEX = 52;         /** rpy stub by index (is not used) */  public static final int  NINF_PKT_RPY_STUB_BY_INDEX = 53;  /** add new server info to MetaServer */  public static final int NINF_PKT_NEW_SERVER = 100;  /** add new stub info to MetaServer */  public static final int NINF_PKT_NEW_STUB = 101;  /** RTT */  public static final int NINF_PKT_RTT_1 = 102;  public static final int NINF_PKT_RTT_2 = 103;  /** add new metaserver to MetaServer */  public static final int NINF_PKT_NEW_MS = 104;  /**     consult stub info from MetaServer to MetaServer    parameter:      arg1, arg2 : 0 (dummy)      String: entry name      String: uniq id (localy-uniq-id@initiator'sFQDN)      Int   : count      String: initiator's FQDN      Int   : initiator's port    */  public static final int NINF_PKT_CONSULT_STUB = 105;  /** Dump info holded by MetaServer */  public static final int NINF_DUMP_MS_INFO = 200;  public static final int NINF_RPY_MS_INFO  = 201;  /** exec stub program directly */  public static final int NINF_PKT_REQ_EXEC = 0xfe;  /** reply stub program directly */  public static final int NINF_PKT_RPY_EXEC = 0xff;  /** options for req_stub_index_list */  public static final int PARTIAL = 0;  public static final int EXACT = 1;  public static NinfPktHeader StubReq =    new NinfPktHeader(NINF_PKT_REQ_STUB_INFO, 0);  public boolean isRpyStubInfo(){    return (code == NINF_PKT_RPY_STUB_INFO);  }  public boolean isRpyCall(){    return (code == NINF_PKT_RPY_CALL);  }  public int size;  public int code;  public int arg1;  public int arg2;  public static final int PktHeaderSize = 16;  public NinfPktHeader(int code, int size){    this.size = size;    this.code = code;    arg1 = 0;    arg2 = 0;  }  public NinfPktHeader(int code, int size, int a, int b){    this.size = size;    this.code = code;    arg1 = a;    arg2 = b;  }  public String toString(){    String tmp =      "NinfPktHeader(size: " +size+	", code: " +code+", arg1: " +arg1+", arg2: " +arg2+")";    return tmp;  }  public NinfPktHeader(XDRInputStream is) throws IOException{    size = is.readInt() - PktHeaderSize;    code = is.readInt();    arg1 = is.readInt();    arg2 = is.readInt();  }  public void writeTo(XDROutputStream os) throws IOException{    System.out.println("PktOut:" + toString());    os.writeInt(size + PktHeaderSize);    os.writeInt(code);    os.writeInt(arg1);    os.writeInt(arg2);  }}// end of NinfPktHeader.java